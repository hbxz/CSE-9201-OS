/*
 * Sample/test code for running a user program.  You can use this for
 * reference when implementing the execv() system call. Remember though
 * that execv() needs to do more than this function does.
 */

#include <types.h>
#include <kern/unistd.h>
#include <kern/errno.h>
#include <lib.h>
#include <addrspace.h>
#include <thread.h>
#include <curthread.h>
#include <vm.h>
#include <vfs.h>
#include <test.h>
#include <syscall.h>


/*
 * Load program "progname" and start running it in usermode.
 * Does not return except on error.
 *
 * Calls vfs_open on progname and thus may destroy it.
 */
int
runprogram(char *progname)
{
	struct vnode *v;
	struct device *cons_dev;	// -- fk --
	
	vaddr_t entrypoint, stackptr;
	int result;
	
	/* Open the file. */
	result = vfs_open(progname, O_RDONLY, &v);
	if (result) {
		return result;
	}

	/* We should be a new thread. */
	assert(curthread->t_vmspace == NULL);

	/* Create a new address space. */
	curthread->t_vmspace = as_create();
	if (curthread->t_vmspace==NULL) {
		vfs_close(v);
		return ENOMEM;
	}

	/* Activate it. */
	as_activate(curthread->t_vmspace);

	/* Load the executable. */
	result = load_elf(v, &entrypoint);
	if (result) {
		/* thread_exit destroys curthread->t_vmspace */
		vfs_close(v);
		return result;
	}


	/* Done with the file now. */
	vfs_close(v);

	/* Define the user stack in the address space */
	result = as_define_stack(curthread->t_vmspace, &stackptr);
	if (result) {
		/* thread_exit destroys curthread->t_vmspace */
		return result;
	}
	
	/* Warp to user mode. */
	
	// --- fk ---
	// add console device...
	// vfs_adddev("con:", cons_dev, 0);
	// pass the console device to usermode
	
	// dnmu841@cse
	
	
	// device is added, has to attach the device...
	struct vnode *vn;
	int err;

	err = vfs_open("con:", O_WRONLY, &vn);
	// returns a vnode, write to vnode
	
	
	//md_usermode(1, (userptr_t)cons_dev, stackptr, entrypoint);
	// --- / ---
	// void pointer: can point to anything
	
	// use kmalloc on pointer...
	// "uiomove()" is OK to use... uses copyin/out, set up prop. uio struct first, set space to right address space.
	// move from usermode to kernelmode, 
	
	
	md_usermode(0 /*argc*/, NULL /*userspace addr of argv*/,
		    stackptr, entrypoint);
	
	/* md_usermode does not return */
	panic("md_usermode returned\n");
	return EINVAL;
}

